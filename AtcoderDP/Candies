Here, dp[i][j] = number of ways to distribute candies
                 among children a[i...] following the given
                 conditions.

     dp[i][j] = dp[i + 1][j] + dp[i + 1][j - 1] + dp[i + 1][j - 2] + ............. + dp[i + 1][max(0, j - a[i])]
     The above terms are just a contiguous segment of the next
     dp state so we can have a prefix sum of the next do state.

     Ans = dp[0][k]

CODE :

    const int mxK = 1e5, mxN = 1e2;
    int dp[mxN + 1][mxK + 1];
    int n, k; cin >> n >> k;
    vl a(n); read(a)
    dp[n][0] = 1;
    for (int i = 0; i <= k; ++i) {
        nextPref[i] = 1;
    }
    for (int i = n - 1; i >= 0; --i) {
        for (int j = 0; j <= k; ++j) {
            int l = max(0LL, j - a[i]), r = j;
            dp[i][j] = nextPref[r] - (l == 0 ? 0 : nextPref[l - 1]);
            dp[i][j] %= mod;
        }
        // updating the next pref
        for (int j = 0; j <= k; ++j) {
            nextPref[j] = dp[i][j] + (j == 0 ? 0 : nextPref[j - 1]);
            nextPref[j] %= mod;
        }
    }
    addSelf(dp[0][k], 0);
    pr(dp[0][k])
