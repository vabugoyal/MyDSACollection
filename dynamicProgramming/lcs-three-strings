STRUCTURE

Sub-Problems:
        given three strings starting at index i, j, k
        find the longest common substrings in them
Guesses:
        a) char at ith, jth, and kth position are same
        b) they are not same
Expressions:
        if (s[i] == s[j] and s[j] == s[k]){
            dp[i][j][k] = 1 + dp[i+1][j+1][k+1]
        } else {
            dp[i][j][k] = max(dp[i+1][j][k], dp[i][j+1][k], dp[i][j][k+1])
        }

        Base Cases
        if (i == n1 or j == n2 or k == n3){
            dp[i][j][k] = 0
        }

CODE:

int LCSof3 (string A, string B, string C, int n1, int n2, int n3)
{
    // your code here
    vector<vector<vector<int>>> dp(n1+1, vector<vector<int>> (n2+1, vector<int> (n3+1, 0)));
    for (int i=n1-1;i>=0;--i){
        for (int j=n2-1;j>=0;--j) {
            for (int k=n3-1;k>=0;--k) {
                if ((A[i] == B[j]) and (B[j] == C[k])) {
                    dp[i][j][k] = 1 + dp[i+1][j+1][k+1];
                } else {
                    dp[i][j][k] = max({dp[i+1][j][k], dp[i][j+1][k], dp[i][j][k+1]});
                }
            }
        }
    }

    return dp[0][0][0];

}