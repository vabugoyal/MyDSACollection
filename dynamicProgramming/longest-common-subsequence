STRUCTURE:

Sub-Problems:
        given a string a, starting from index i
        and string b, starting from index j, find the
        longest common subsequence in them
Guesses:
        a) char at ith index and jth index are same
        b) char at ith index and jth index are not same
Expressions:
        if (a[i] == b[j]){
            dp[i][j] = dp[i+1][j+1] + 1
        } else {
            dp[i][j] = max(dp[i+1][j], dp[i][j+1])
        }

        Base Cases:
        if (i == n1 or j == n2) return 0

CODE:
    int lcs(int x, int y, string s1, string s2)
    {
        // your code here
        int n1 = s1.size(), n2 = s2.size();
        vector<vector<int>> dp(n1+1, vector<int>(n2+1, 0));
        for (int i=n1-1;i>=0;--i) {
            for (int j=n2-1;j>=0;--j) {
                if (s1[i] == s2[j]) {
                    dp[i][j] = 1 + dp[i+1][j+1];
                } else {
                    dp[i][j] = max(dp[i+1][j], dp[i][j+1]);
                }
            }
        }

        return dp[0][0];
    }