STRUCTURE:

1. Sub-Problems:
        given a starting from ith index
        given b starting from jth index
        given c to be constructed after kth index
        find if it is possible to do so
2. Guesses:
        first char of c will match with
        a) first character of a
        b) first character of b

3. Relating sub-problems:
        dp[i][j][k] = sum of results of all the following possibilities
        if (i < len(a) and a[i] == c[k]) dp[i+1][j][k+1]
        else if (j < len(b) and b[j] == c[k]) dp[i][j+1][k+1]

        Base Cases:
        if (k == len(c)) return 1


        Optimisation:
        We don't need k as it will be equal to
        k-1 = i-1 + j-1 // 1 based indexing
        k = i + j // 0 based indexing


CODE:
        def isInterleave(self, a, b, c):
            # Code here

            memo = {}
            def func(i, j, k):
                if (k == len(c)): return 1
                if (i, j, k) in memo: return memo[(i, j, k)]
                res = 0
                if (i < len(a) and a[i] == c[k]): res += func(i+1, j, k+1)
                if (j < len(b) and b[j] == c[k]): res+= func(i, j+1, k+1)
                memo[(i, j, k)] = res
                return res

            return func(0, 0, 0)




