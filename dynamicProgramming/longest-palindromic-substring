STRUCTURE:

Brute Force:
        Try all possible sub-strings and check, if it
        a palindrome.
        # Possible Sub-strings: O(n^2)
        Time to check each substring: O(n)
        Total time: O(n^3)

Method 1

Optimisation:
        To check if s[i...j] if a palindrome, then

        if (s[i] == s[j]) then check if s[i+1...j-1] is a palindrome
        else try to find the biggest palindrome in s[i....j-1] or s[i+1...j]

        Base Cases:
        // palindrome of length 1
        d[i][i] = 1 for all i

        // palindrome of length 2
        if (s[i] == s[i+1]) dp[i][i+1] = 1

        CODE:

            string longestPalindrome(string s) {

                int n = s.size();
                vector<vector<int>> dp(n, vector<int> (n, 0));

                // palindromes of len 1
                for (int i=0;i<n;i++) dp[i][i] = 1;
                // palindromes of len 2
                for (int i=0;i<n-1;i++) {
                    if (s[i] == s[i+1]){
                        dp[i][i+1] = 1;
                    }
                }

                for (int i=n-3;i>=0;--i){
                    for (int j=i+2;j<n;j++){
                        if (s[i] == s[j]){
                            dp[i][j] = dp[i+1][j-1];
                        } else {
                            dp[i][j] = 0;
                        }
                    }
                }

                int start=0;
                int ans = 1;
                for(int i=0;i<n;i++){
                    for (int j=i;j<n;j++){
                        if (dp[i][j]){
                            if (j-i+1 > ans){
                                ans = j-i+1;
                                start = i;
                            }
                        }
                    }
                }

                return s.substr(start, ans);

            }



Method 2: Expand from the middle

        CODE:

                int n = s.size();
                int ans = 1;
                int start=0;
                for (int i=0;i<n;i++){

                    // palindromes of even length
                    for (int j=0;i-j>=0 && i+j<n;j++){
                        if (s[i-j] == s[i+j]) {
                            if (2*j+1 > ans){
                                ans = 2*j+1; start = i-j;
                            }
                        }
                        else {break;}
                    }

                    // palindromes of odd length
                    for (int j=0;i-j>=0 && i+j+1<n;j++){
                        if (s[i-j] == s[i+j+1]) {
                            if (2*j+2 > ans){
                                ans = 2*j+2; start = i-j;
                            }
                        }
                        else {break;}
                    }

                }

                return s.substr(start, ans);
            }


Method 3: Based on longest common substring







