S - Single Responsibility Principle
    Each class should have only one responsibility.
    We should solve only one problem using a class.
    Only one actor should ask for a change in the
    given class.


O - open closed principle
    You should be able to extend a class
    behaviour without changing it.



L - Liskov substitution principle
    Derived classes must be substitutable for their
    base classes.


I - interface segregation principle
    Make fine grained interfaces which are
    client specific. This will help us avoid
    code bloating.


D - dependency inversion principle
    High level modules should not be dependent on low
    level modules. Both should depend on abstractions.
    Abstractions should not depend on details. Details
    should depend on abstractions.




Relationship among classes.
            HAS

Composition: One entity cannot exist without other.
             Ex. Customer has a credit card. Credit card
             cannot exist without a customer. Similarly,
             we can't have a customer without a credit card.
Aggregation: Both entities may or may no have a relation.


            IS A

This is a inheritance relation





