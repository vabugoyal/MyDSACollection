PROBLEM : https://cses.fi/problemset/task/2169/

Approach :
        Same as nested ranges check. But we will
        be storing the right border in an ordered
        multiset to find the number of borders
        smaller than or greater than some given
        right border.

CODE :
        int n; cin >> n;
        vector<ar3> ranges(n);
        f(i, n){
            int l, r; cin >> l >> r;
            ranges[i] = {l, r, i};
        }
        std::sort(ranges.begin(), ranges.end(), [&](ar3 &a, ar3 &b) {
           if (a[0] == b[0]) {
               return a[1] > b[1];
           } else {
               return a[0] < b[0];
           }
        });

        vl contains(n), isContained(n);

        // ordered multiset from policy based data structures.
        omulset<int> os;

        for (int i = 0; i < n; ++i) {
            isContained[ranges[i][2]] = os.size() - os.order_of_key(ranges[i][1]);
            os.insert(ranges[i][1]);
        }

        omulset<int> os2;
        for (int i = n - 1; i >= 0; --i) {
            contains[ranges[i][2]] = os2.order_of_key(ranges[i][1] + 1);
            os2.insert(ranges[i][1]);
        }


        show(contains)
        show(isContained)

