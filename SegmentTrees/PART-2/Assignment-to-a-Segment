

// Set 1 and calc Range
struct item {
    int val;
};


struct SegTree {

    int size;
    vector<item> nodes;
    int const VOID = 0;
    item const NEUTRAL_ELEMENT = {0};


    void init(int n) {
        size = 1;
        while(size < n) size *= 2;
        nodes.assign(2*size, NEUTRAL_ELEMENT);
    }

    void build(vl &a){
        build(a, 0, 0, size);
    }

    void build(vl &a, int x, int lx, int rx) {
        if (rx - lx == 1){
            if (lx < a.size())
                nodes[x] = {a[lx]};
            return;
        }
        int mid = (lx + rx) / 2;
        build(a, 2 * x + 1, lx, mid);
        build(a, 2 * x + 2, mid, rx);
        nodes[x] = NEUTRAL_ELEMENT;
    }


    item modify_op(item x, int v, int lx, int rx) {
        // add v to all elements in seg
        return {
                x.val + v,
        };
    }


    void apply_mod_op(item &a, int v, int lx, int rx){
        a = modify_op(a, v, lx, rx);
    }

//    void propogate(int x, int lx, int rx){
//        if (rx - lx == 1) return;
//        if (nodes[x].op == VOID) return;
//        int mid = (lx + rx) / 2;
//        apply_mod_op(nodes[2 * x + 1], nodes[x].op, lx, mid);
//        apply_mod_op(nodes[2 * x + 2], nodes[x].op, mid, rx);
//        nodes[x].op = VOID;
//    }

    void modify(int l, int r, int v){
        modify(l, r, v, 0, 0, size);
    }

    void modify(int l, int r, int v, int x, int lx, int rx) {
        if (rx <= l || lx >= r) return;
        if (l <= lx && rx <= r){
            apply_mod_op(nodes[x], v, lx, rx);
            return;
        }
//        propogate(x, lx, rx);
        int mid = (lx + rx) / 2;
        modify(l, r, v, 2 * x + 1, lx, mid);
        modify(l, r, v, 2 * x + 2, mid, rx);
    }

    int calcVal(int l, int r){
        return calcVal(l, r, 0, 0, size);
    }

    int calcVal(int l, int r, int x, int lx, int rx) {
        if (rx <= l || r <= lx) return 0;
        if (rx - lx == 1) {
            return nodes[x].val;
        }
//        propogate(x, lx, rx);
        int mid = (lx + rx) / 2;
        int left = calcVal(l, r, 2 * x + 1, lx, mid);
        int right = calcVal(l, r, 2 * x + 2, mid, rx);
        int res = left + right;
        return res + nodes[x].val;
    }
};

