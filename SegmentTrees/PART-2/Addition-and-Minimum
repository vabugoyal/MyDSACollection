

struct SegTree {
    int size;
    vl added, mins;


    void init(int n) {
        size = 1;
        while(size < n) size *= 2;
        added.assign(2*size, 0LL);
        mins.assign(2*size, 0LL);
    }


    void modify(int l, int r, int v){
        modify(l, r, v, 0, 0, size);
    }

    void modify(int l, int r, int v, int x, int lx, int rx){

        if (rx <= l || lx >= r) return;
        if (l <= lx && rx <= r){
            mins[x] += v;
            added[x] += v;
            return;
        }
        int mid = (lx + rx) / 2;
        modify(l, r, v, 2 * x + 1, lx, mid);
        modify(l, r, v, 2 * x + 2, mid, rx);
        mins[x] = min(mins[2 * x + 1], mins[2 * x + 2]) + added[x];
    }

    int calcVal(int l, int r){
        return calcVal(l, r, 0, 0, size);
    }

    int calcVal(int l, int r, int x, int lx, int rx){
        if (l <= lx && r >= rx) return mins[x];
        if (rx <= l || lx >= r) return inf;
        int mid = (lx + rx) / 2;
        int s1 = calcVal(l, r, 2 * x + 1, lx, mid);
        int s2 = calcVal(l, r, 2 * x + 2, mid, rx);
        return min(s1, s2) + added[x];
    }


};
