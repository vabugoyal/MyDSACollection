Problem: Max-Consecutive-Gap

Here, we have n elements. Lets say
max = M and min = m
m .. .... .. .. . . M
Min and I will get when all the
elements inside M and m are equally placed.
m .|. |..|..| .|. |..|..M
This will break the range into n - 1 segs.
here M = m + (n - 1) * gap
=> gap = (M - m) / (n - 1)

Now, if gap is zero means buckets can't
be made and all the elements are in the same
bucket.
Else I will maximise my ans by min of the
current bucket and max of last bucket.


CODE:
    const int inf = 1e9;
    int Solution::maximumGap(const vector<int> &A) {
        // bucket sort
        int n = A.size();
        if (n < 2) return 0;
        int m = *min_element(A.begin(), A.end());
        int M = *max_element(A.begin(), A.end());
        int gap = (M - m) / (n - 1);
        int ans = gap;

        if (gap == 0) {
            vector<int> rebased(n);
            for (auto x : A) rebased[x - m] = 1;
            for (int i=0;i<n;i++) {
                if (!rebased[i]) continue;
                int j = i - 1;
                while(j >= 0 && !rebased[j]) j--;
                if (j >= 0) {
                    int possible = i - j;
                    ans = max(ans, possible);
                }
            }
            return ans;
        }

        vector<int> mB(n, inf), MB(n, -inf);
        for (auto x : A) {
            int bucket = (x - m) / gap;
            mB[bucket] = min(mB[bucket], x);
            MB[bucket] = max(MB[bucket], x);
        }

        for (int i=0;i<n;i++) {
            if (mB[i] == inf) continue;
            int j = i - 1;
            while(j >= 0 && mB[j] == inf) j--;
            if (j >= 0) {
                int possible = mB[i] - MB[j];
                ans = max(ans, possible);
            }
        }

        return ans;





    }


