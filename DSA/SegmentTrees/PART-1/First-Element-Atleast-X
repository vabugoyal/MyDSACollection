
struct item {
    int maxVal;
};


struct SegTree {
    int size;
    vector<item> vals;
    item const NEUTRAL_ELEMENT = {-inf};


    item merge(item a, item b){
        return {
            max(a.maxVal, b.maxVal)
        };
    }

    item single(int v) {
        return {v};
    }

    void init(int n) {
        size = 1;
        while(size < n) size *= 2;
        vals.resize(2*size);
    }

    void build(vl &a, int x, int lx, int rx) {
        if (rx - lx == 1){
            if (lx < sz(a)){
                vals[x] = single(a[lx]);
            }
            return;
        }
        int mid = (lx + rx) / 2;
        build(a, 2 * x + 1, lx, mid);
        build(a, 2 * x + 2, mid, rx);
        vals[x] = merge(vals[2 * x + 1], vals[2 * x + 2]);

    }

    void build(vl &a){
        build(a, 0, 0, size);
    }

    void set(int i, int v){
        set(i, v, 0, 0, size);
    }

    void set(int i, int v, int x, int lx, int rx){
            if (rx - lx == 1) {
                vals[x] = single(v);
                return;
            }
            int mid = (lx + rx) / 2;
            if (i < mid){
                set(i, v, 2 * x + 1, lx, mid);
            } else {
                set(i, v, 2 * x + 2, mid, rx);
            }
            vals[x] = merge(vals[2 * x + 1], vals[2 * x + 2]);
    }

    int find(int k, int l) {
        return find(k, l, 0, 0, size);
    }

    int find(int k, int l, int x, int lx, int rx) {
        if (vals[x].maxVal < k) return -1;
        if (rx <= l) return -1;
        if (rx - lx == 1) return lx;
        int mid = (lx + rx) / 2;
        int res = find(k, l, 2 * x + 1, lx, mid);
        if (res == -1){
            res = find(k, l, 2 * x + 2, mid, rx);
        }
        return res;
    }



};

