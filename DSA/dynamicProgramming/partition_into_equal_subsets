Structure

1. Sub-problems:
        Given a list I want to be able to tell if
        sum x is possible from that list.
        List will be identified by the starting point
        the list i.e index 'i'
2. Guess:
        Now I have a list and I am at its particular index
        I have two options either I select that element or I
        don't
3. Relating sub-problems:
        Checking if either one of them is leading me to
        the solution
4. Finding the global solution




// Memoization Method

    vector<vector<int>> memo;
    int equalPartition(int N, int arr[])
    {
        // code here
        int s = 0;
        for(int i=0;i<N;i++) s += arr[i];
        if (s&1){
            return 0;
        }
        memo.assign(N+1, vector<int> (s, -1));
        return dp(arr, N, 0, s/2);
    }

    int dp(int *ls, int n, int i, int x){

        if (i == n){
            if (x == 0){
                return 1;
            } else {
                return 0;
            }
        }
        if (memo[i][x] != -1) {
            return memo[i][x];
        }
        memo[i][x] = dp(ls, n, i+1, x);
        if (x >= ls[i]) memo[i][x] += dp(ls, n, i+1, x-ls[i]);
        return memo[i][x];
    }
};


Since dp(i, x) = dp(i+1, x) + dp(i+1, x-ls[i]])
we can optimise the space as we require only the current row and the previous row.
Also only the past values of the previous row are required so we can
use only the current row to update the values



