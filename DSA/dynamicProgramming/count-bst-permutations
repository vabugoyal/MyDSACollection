https://www.interviewbit.com/problems/count-permutations-of-bst/

const int M = 1e9 + 7;
const int mxN = 55;
long long fac[mxN], in[mxN];

long long mpow(long long a, long long b) {
    long long res = 1;
    while(b) {
        if (b & 1) res = (res * a) % M;
        b >>= 1;
        a = (a * a) % M;
    }
    return res;
}

void calc() {
    fac[0] = 1;
    in[0] = 1;
    for (long long i = 1; i < mxN; i++) {
        fac[i] = (i * fac[i - 1]) % M;
        in[i] = (mpow(i, M - 2) * in[i - 1]) % M;
    }
}

long long ncr(long long a, long long b) {
    if (b > a || a < 0) return 0;
    long long num = fac[a];
    long long den = (in[b] * in[a - b]) % M;
    return (num * den) % M;
}




int Solution::cntPermBST(int A, int B) {
    calc();
    vector<vector<long long>> dp(A + 5, vector<long long>(B + 5));
    dp[1][1] = 1;
    dp[0][0] = 1;
    for (int i = 2; i <= A; i++) {
        for (int j = 1; j <= B + 1; j++) {
            if (j > i) continue;
            for (int l = 0; l < i; l++) {
                int r = i - l - 1;
                // calculating any[r]
                long long any_r = 0, any_l = 0;
                for (int k = 0; k <= j - 1; k++) any_r += dp[r][k];
                for (int k = 0; k <= j - 1; k++) any_l += dp[l][k];
                any_r %= M, any_l %= M;
                long long ways = ncr(i - 1, l) * ((
                        dp[l][j - 1] * any_r
                        + any_l * dp[r][j - 1]
                        - dp[l][j - 1] * dp[r][j - 1]) % M);
                dp[i][j] = (dp[i][j] + ways + M) % M;
            }
        }
    }

    return dp[A][B + 1];
}


